{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 654,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "import statsmodels\n",
    "import statsmodels.api as sm\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.feature_selection import RFE\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 655,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>...</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>Lead Profile</th>\n",
       "      <th>City</th>\n",
       "      <th>Asymmetrique Activity Index</th>\n",
       "      <th>Asymmetrique Profile Index</th>\n",
       "      <th>Asymmetrique Activity Score</th>\n",
       "      <th>Asymmetrique Profile Score</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Select</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Select</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Potential Lead</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>13.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>15.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  ...  \\\n",
       "0                            0                   0.0  ...   \n",
       "1                          674                   2.5  ...   \n",
       "2                         1532                   2.0  ...   \n",
       "3                          305                   1.0  ...   \n",
       "4                         1428                   1.0  ...   \n",
       "\n",
       "  Get updates on DM Content    Lead Profile    City  \\\n",
       "0                        No          Select  Select   \n",
       "1                        No          Select  Select   \n",
       "2                        No  Potential Lead  Mumbai   \n",
       "3                        No          Select  Mumbai   \n",
       "4                        No          Select  Mumbai   \n",
       "\n",
       "  Asymmetrique Activity Index Asymmetrique Profile Index  \\\n",
       "0                   02.Medium                  02.Medium   \n",
       "1                   02.Medium                  02.Medium   \n",
       "2                   02.Medium                    01.High   \n",
       "3                   02.Medium                    01.High   \n",
       "4                   02.Medium                    01.High   \n",
       "\n",
       "  Asymmetrique Activity Score Asymmetrique Profile Score  \\\n",
       "0                        15.0                       15.0   \n",
       "1                        15.0                       15.0   \n",
       "2                        14.0                       20.0   \n",
       "3                        13.0                       17.0   \n",
       "4                        15.0                       18.0   \n",
       "\n",
       "  I agree to pay the amount through cheque  \\\n",
       "0                                       No   \n",
       "1                                       No   \n",
       "2                                       No   \n",
       "3                                       No   \n",
       "4                                       No   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 655,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing data from CSV file\n",
    "\n",
    "data = pd.read_csv('/Users/khemendrasai/Desktop/Data science/case study lead scoring/Leads.csv')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 656,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9240, 37)"
      ]
     },
     "execution_count": 656,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 657,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9240 entries, 0 to 9239\n",
      "Data columns (total 37 columns):\n",
      "Prospect ID                                      9240 non-null object\n",
      "Lead Number                                      9240 non-null int64\n",
      "Lead Origin                                      9240 non-null object\n",
      "Lead Source                                      9204 non-null object\n",
      "Do Not Email                                     9240 non-null object\n",
      "Do Not Call                                      9240 non-null object\n",
      "Converted                                        9240 non-null int64\n",
      "TotalVisits                                      9103 non-null float64\n",
      "Total Time Spent on Website                      9240 non-null int64\n",
      "Page Views Per Visit                             9103 non-null float64\n",
      "Last Activity                                    9137 non-null object\n",
      "Country                                          6779 non-null object\n",
      "Specialization                                   7802 non-null object\n",
      "How did you hear about X Education               7033 non-null object\n",
      "What is your current occupation                  6550 non-null object\n",
      "What matters most to you in choosing a course    6531 non-null object\n",
      "Search                                           9240 non-null object\n",
      "Magazine                                         9240 non-null object\n",
      "Newspaper Article                                9240 non-null object\n",
      "X Education Forums                               9240 non-null object\n",
      "Newspaper                                        9240 non-null object\n",
      "Digital Advertisement                            9240 non-null object\n",
      "Through Recommendations                          9240 non-null object\n",
      "Receive More Updates About Our Courses           9240 non-null object\n",
      "Tags                                             5887 non-null object\n",
      "Lead Quality                                     4473 non-null object\n",
      "Update me on Supply Chain Content                9240 non-null object\n",
      "Get updates on DM Content                        9240 non-null object\n",
      "Lead Profile                                     6531 non-null object\n",
      "City                                             7820 non-null object\n",
      "Asymmetrique Activity Index                      5022 non-null object\n",
      "Asymmetrique Profile Index                       5022 non-null object\n",
      "Asymmetrique Activity Score                      5022 non-null float64\n",
      "Asymmetrique Profile Score                       5022 non-null float64\n",
      "I agree to pay the amount through cheque         9240 non-null object\n",
      "A free copy of Mastering The Interview           9240 non-null object\n",
      "Last Notable Activity                            9240 non-null object\n",
      "dtypes: float64(4), int64(3), object(30)\n",
      "memory usage: 2.6+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 658,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Asymmetrique Activity Score</th>\n",
       "      <th>Asymmetrique Profile Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9103.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9103.000000</td>\n",
       "      <td>5022.000000</td>\n",
       "      <td>5022.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>617188.435606</td>\n",
       "      <td>0.385390</td>\n",
       "      <td>3.445238</td>\n",
       "      <td>487.698268</td>\n",
       "      <td>2.362820</td>\n",
       "      <td>14.306252</td>\n",
       "      <td>16.344883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>23405.995698</td>\n",
       "      <td>0.486714</td>\n",
       "      <td>4.854853</td>\n",
       "      <td>548.021466</td>\n",
       "      <td>2.161418</td>\n",
       "      <td>1.386694</td>\n",
       "      <td>1.811395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>579533.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>596484.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>615479.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>248.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>637387.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>936.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>660737.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>251.000000</td>\n",
       "      <td>2272.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Lead Number    Converted  TotalVisits  Total Time Spent on Website  \\\n",
       "count    9240.000000  9240.000000  9103.000000                  9240.000000   \n",
       "mean   617188.435606     0.385390     3.445238                   487.698268   \n",
       "std     23405.995698     0.486714     4.854853                   548.021466   \n",
       "min    579533.000000     0.000000     0.000000                     0.000000   \n",
       "25%    596484.500000     0.000000     1.000000                    12.000000   \n",
       "50%    615479.000000     0.000000     3.000000                   248.000000   \n",
       "75%    637387.250000     1.000000     5.000000                   936.000000   \n",
       "max    660737.000000     1.000000   251.000000                  2272.000000   \n",
       "\n",
       "       Page Views Per Visit  Asymmetrique Activity Score  \\\n",
       "count           9103.000000                  5022.000000   \n",
       "mean               2.362820                    14.306252   \n",
       "std                2.161418                     1.386694   \n",
       "min                0.000000                     7.000000   \n",
       "25%                1.000000                    14.000000   \n",
       "50%                2.000000                    14.000000   \n",
       "75%                3.000000                    15.000000   \n",
       "max               55.000000                    18.000000   \n",
       "\n",
       "       Asymmetrique Profile Score  \n",
       "count                 5022.000000  \n",
       "mean                    16.344883  \n",
       "std                      1.811395  \n",
       "min                     11.000000  \n",
       "25%                     15.000000  \n",
       "50%                     16.000000  \n",
       "75%                     18.000000  \n",
       "max                     20.000000  "
      ]
     },
     "execution_count": 658,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 659,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>...</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>Lead Profile</th>\n",
       "      <th>City</th>\n",
       "      <th>Asymmetrique Activity Index</th>\n",
       "      <th>Asymmetrique Profile Index</th>\n",
       "      <th>Asymmetrique Activity Score</th>\n",
       "      <th>Asymmetrique Profile Score</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>Potential Lead</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>13.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>15.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 37 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  ...  \\\n",
       "0                            0                   0.0  ...   \n",
       "1                          674                   2.5  ...   \n",
       "2                         1532                   2.0  ...   \n",
       "3                          305                   1.0  ...   \n",
       "4                         1428                   1.0  ...   \n",
       "\n",
       "  Get updates on DM Content    Lead Profile    City  \\\n",
       "0                        No             NaN     NaN   \n",
       "1                        No             NaN     NaN   \n",
       "2                        No  Potential Lead  Mumbai   \n",
       "3                        No             NaN  Mumbai   \n",
       "4                        No             NaN  Mumbai   \n",
       "\n",
       "  Asymmetrique Activity Index Asymmetrique Profile Index  \\\n",
       "0                   02.Medium                  02.Medium   \n",
       "1                   02.Medium                  02.Medium   \n",
       "2                   02.Medium                    01.High   \n",
       "3                   02.Medium                    01.High   \n",
       "4                   02.Medium                    01.High   \n",
       "\n",
       "  Asymmetrique Activity Score Asymmetrique Profile Score  \\\n",
       "0                        15.0                       15.0   \n",
       "1                        15.0                       15.0   \n",
       "2                        14.0                       20.0   \n",
       "3                        13.0                       17.0   \n",
       "4                        15.0                       18.0   \n",
       "\n",
       "  I agree to pay the amount through cheque  \\\n",
       "0                                       No   \n",
       "1                                       No   \n",
       "2                                       No   \n",
       "3                                       No   \n",
       "4                                       No   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  \n",
       "\n",
       "[5 rows x 37 columns]"
      ]
     },
     "execution_count": 659,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# replacing 'select' level items with null\n",
    "\n",
    "data.replace(\n",
    "    to_replace='Select',\n",
    "    value=np.nan,\n",
    "    inplace=True,\n",
    "    limit=None,\n",
    "    regex=True,\n",
    "    method='pad',\n",
    ")\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 661,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Prospect ID                                         0\n",
       "Lead Number                                         0\n",
       "Lead Origin                                         0\n",
       "Lead Source                                        36\n",
       "Do Not Email                                        0\n",
       "Do Not Call                                         0\n",
       "Converted                                           0\n",
       "TotalVisits                                       137\n",
       "Total Time Spent on Website                         0\n",
       "Page Views Per Visit                              137\n",
       "Last Activity                                     103\n",
       "Country                                          2461\n",
       "Specialization                                   3380\n",
       "How did you hear about X Education               7250\n",
       "What is your current occupation                  2690\n",
       "What matters most to you in choosing a course    2709\n",
       "Search                                              0\n",
       "Magazine                                            0\n",
       "Newspaper Article                                   0\n",
       "X Education Forums                                  0\n",
       "Newspaper                                           0\n",
       "Digital Advertisement                               0\n",
       "Through Recommendations                             0\n",
       "Receive More Updates About Our Courses              0\n",
       "Tags                                             3353\n",
       "Lead Quality                                     4767\n",
       "Update me on Supply Chain Content                   0\n",
       "Get updates on DM Content                           0\n",
       "Lead Profile                                     6855\n",
       "City                                             3669\n",
       "Asymmetrique Activity Index                      4218\n",
       "Asymmetrique Profile Index                       4218\n",
       "Asymmetrique Activity Score                      4218\n",
       "Asymmetrique Profile Score                       4218\n",
       "I agree to pay the amount through cheque            0\n",
       "A free copy of Mastering The Interview              0\n",
       "Last Notable Activity                               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 661,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking for missing values in each columns\n",
    "\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 660,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Prospect ID', 'Lead Number', 'Lead Origin', 'Lead Source',\n",
       "       'Do Not Email', 'Do Not Call', 'Converted', 'TotalVisits',\n",
       "       'Total Time Spent on Website', 'Page Views Per Visit', 'Last Activity',\n",
       "       'Country', 'Specialization', 'How did you hear about X Education',\n",
       "       'What is your current occupation',\n",
       "       'What matters most to you in choosing a course', 'Search', 'Magazine',\n",
       "       'Newspaper Article', 'X Education Forums', 'Newspaper',\n",
       "       'Digital Advertisement', 'Through Recommendations',\n",
       "       'Receive More Updates About Our Courses', 'Tags', 'Lead Quality',\n",
       "       'Update me on Supply Chain Content', 'Get updates on DM Content',\n",
       "       'Lead Profile', 'City', 'Asymmetrique Activity Index',\n",
       "       'Asymmetrique Profile Index', 'Asymmetrique Activity Score',\n",
       "       'Asymmetrique Profile Score',\n",
       "       'I agree to pay the amount through cheque',\n",
       "       'A free copy of Mastering The Interview', 'Last Notable Activity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 660,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 662,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count                        6531\n",
      "unique                          3\n",
      "top       Better Career Prospects\n",
      "freq                         6528\n",
      "Name: What matters most to you in choosing a course, dtype: object\n",
      "count           6550\n",
      "unique             6\n",
      "top       Unemployed\n",
      "freq            5600\n",
      "Name: What is your current occupation, dtype: object\n",
      "count              1990\n",
      "unique                9\n",
      "top       Online Search\n",
      "freq                808\n",
      "Name: How did you hear about X Education, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(data['What matters most to you in choosing a course'].describe())\n",
    "print(data['What is your current occupation'].describe())\n",
    "print(data['How did you hear about X Education'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 663,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping the columns with high skewness and high missing values\n",
    "\n",
    "data2 = data.drop(columns = ['Lead Quality','Lead Profile','What matters most to you in choosing a course','What is your current occupation','How did you hear about X Education','Asymmetrique Activity Index','Asymmetrique Profile Index','Asymmetrique Activity Score','Asymmetrique Profile Score'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 664,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>...</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>Receive More Updates About Our Courses</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Update me on Supply Chain Content</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>City</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Interested in other courses</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ringing</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Will revert after reading the email</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ringing</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Will revert after reading the email</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  ...  \\\n",
       "0                            0                   0.0  ...   \n",
       "1                          674                   2.5  ...   \n",
       "2                         1532                   2.0  ...   \n",
       "3                          305                   1.0  ...   \n",
       "4                         1428                   1.0  ...   \n",
       "\n",
       "  Digital Advertisement Through Recommendations  \\\n",
       "0                    No                      No   \n",
       "1                    No                      No   \n",
       "2                    No                      No   \n",
       "3                    No                      No   \n",
       "4                    No                      No   \n",
       "\n",
       "  Receive More Updates About Our Courses                                 Tags  \\\n",
       "0                                     No          Interested in other courses   \n",
       "1                                     No                              Ringing   \n",
       "2                                     No  Will revert after reading the email   \n",
       "3                                     No                              Ringing   \n",
       "4                                     No  Will revert after reading the email   \n",
       "\n",
       "  Update me on Supply Chain Content Get updates on DM Content    City  \\\n",
       "0                                No                        No     NaN   \n",
       "1                                No                        No     NaN   \n",
       "2                                No                        No  Mumbai   \n",
       "3                                No                        No  Mumbai   \n",
       "4                                No                        No  Mumbai   \n",
       "\n",
       "  I agree to pay the amount through cheque  \\\n",
       "0                                       No   \n",
       "1                                       No   \n",
       "2                                       No   \n",
       "3                                       No   \n",
       "4                                       No   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 664,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 665,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Prospect ID                                    0\n",
       "Lead Number                                    0\n",
       "Lead Origin                                    0\n",
       "Lead Source                                   36\n",
       "Do Not Email                                   0\n",
       "Do Not Call                                    0\n",
       "Converted                                      0\n",
       "TotalVisits                                  137\n",
       "Total Time Spent on Website                    0\n",
       "Page Views Per Visit                         137\n",
       "Last Activity                                103\n",
       "Country                                     2461\n",
       "Specialization                              3380\n",
       "Search                                         0\n",
       "Magazine                                       0\n",
       "Newspaper Article                              0\n",
       "X Education Forums                             0\n",
       "Newspaper                                      0\n",
       "Digital Advertisement                          0\n",
       "Through Recommendations                        0\n",
       "Receive More Updates About Our Courses         0\n",
       "Tags                                        3353\n",
       "Update me on Supply Chain Content              0\n",
       "Get updates on DM Content                      0\n",
       "City                                        3669\n",
       "I agree to pay the amount through cheque       0\n",
       "A free copy of Mastering The Interview         0\n",
       "Last Notable Activity                          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 665,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking for missing values\n",
    "\n",
    "data2.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 666,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>...</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>Receive More Updates About Our Courses</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Update me on Supply Chain Content</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>City</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Interested in other courses</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ringing</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Will revert after reading the email</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ringing</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Will revert after reading the email</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 28 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  ...  \\\n",
       "0                            0                   0.0  ...   \n",
       "1                          674                   2.5  ...   \n",
       "2                         1532                   2.0  ...   \n",
       "3                          305                   1.0  ...   \n",
       "4                         1428                   1.0  ...   \n",
       "\n",
       "  Digital Advertisement Through Recommendations  \\\n",
       "0                    No                      No   \n",
       "1                    No                      No   \n",
       "2                    No                      No   \n",
       "3                    No                      No   \n",
       "4                    No                      No   \n",
       "\n",
       "  Receive More Updates About Our Courses                                 Tags  \\\n",
       "0                                     No          Interested in other courses   \n",
       "1                                     No                              Ringing   \n",
       "2                                     No  Will revert after reading the email   \n",
       "3                                     No                              Ringing   \n",
       "4                                     No  Will revert after reading the email   \n",
       "\n",
       "  Update me on Supply Chain Content Get updates on DM Content    City  \\\n",
       "0                                No                        No     NaN   \n",
       "1                                No                        No     NaN   \n",
       "2                                No                        No  Mumbai   \n",
       "3                                No                        No  Mumbai   \n",
       "4                                No                        No  Mumbai   \n",
       "\n",
       "  I agree to pay the amount through cheque  \\\n",
       "0                                       No   \n",
       "1                                       No   \n",
       "2                                       No   \n",
       "3                                       No   \n",
       "4                                       No   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  \n",
       "\n",
       "[5 rows x 28 columns]"
      ]
     },
     "execution_count": 666,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# dropping the rows in the columns which have less than 200 missing values\n",
    "\n",
    "data3 = data2.dropna(subset = ['Lead Source','TotalVisits','Page Views Per Visit','Last Activity'],how = 'any',axis=0)\n",
    "data3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 667,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Prospect ID                                    0\n",
       "Lead Number                                    0\n",
       "Lead Origin                                    0\n",
       "Lead Source                                    0\n",
       "Do Not Email                                   0\n",
       "Do Not Call                                    0\n",
       "Converted                                      0\n",
       "TotalVisits                                    0\n",
       "Total Time Spent on Website                    0\n",
       "Page Views Per Visit                           0\n",
       "Last Activity                                  0\n",
       "Country                                     2296\n",
       "Specialization                              3282\n",
       "Search                                         0\n",
       "Magazine                                       0\n",
       "Newspaper Article                              0\n",
       "X Education Forums                             0\n",
       "Newspaper                                      0\n",
       "Digital Advertisement                          0\n",
       "Through Recommendations                        0\n",
       "Receive More Updates About Our Courses         0\n",
       "Tags                                        3327\n",
       "Update me on Supply Chain Content              0\n",
       "Get updates on DM Content                      0\n",
       "City                                        3575\n",
       "I agree to pay the amount through cheque       0\n",
       "A free copy of Mastering The Interview         0\n",
       "Last Notable Activity                          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 667,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking for missing values\n",
    "\n",
    "data3.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9074, 28)"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Prospect ID', 'Lead Number', 'Lead Origin', 'Lead Source',\n",
       "       'Do Not Email', 'Do Not Call', 'Converted', 'TotalVisits',\n",
       "       'Total Time Spent on Website', 'Page Views Per Visit', 'Last Activity',\n",
       "       'Country', 'Specialization', 'Search', 'Magazine', 'Newspaper Article',\n",
       "       'X Education Forums', 'Newspaper', 'Digital Advertisement',\n",
       "       'Through Recommendations', 'Receive More Updates About Our Courses',\n",
       "       'Tags', 'Update me on Supply Chain Content',\n",
       "       'Get updates on DM Content', 'City',\n",
       "       'I agree to pay the amount through cheque',\n",
       "       'A free copy of Mastering The Interview', 'Last Notable Activity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count      6778\n",
      "unique       38\n",
      "top       India\n",
      "freq       6491\n",
      "Name: Country, dtype: object\n",
      "count                   5792\n",
      "unique                    18\n",
      "top       Finance Management\n",
      "freq                     959\n",
      "Name: Specialization, dtype: object\n",
      "count                                    5747\n",
      "unique                                     26\n",
      "top       Will revert after reading the email\n",
      "freq                                     2016\n",
      "Name: Tags, dtype: object\n",
      "count       5499\n",
      "unique         6\n",
      "top       Mumbai\n",
      "freq        3177\n",
      "Name: City, dtype: object\n"
     ]
    }
   ],
   "source": [
    "# checking for  number of unique values in categorical columns\n",
    "\n",
    "print(data3['Country'].describe())\n",
    "print(data3['Specialization'].describe())\n",
    "print(data3['Tags'].describe())\n",
    "print(data3['City'].describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mumbai                         3222\n",
      "Thane & Outskirts               752\n",
      "Other Cities                    686\n",
      "Other Cities of Maharashtra     457\n",
      "Other Metro Cities              380\n",
      "Tier II Cities                   74\n",
      "Name: City, dtype: int64\n",
      "Finance Management                   976\n",
      "Human Resource Management            848\n",
      "Marketing Management                 838\n",
      "Operations Management                503\n",
      "Business Administration              403\n",
      "IT Projects Management               366\n",
      "Supply Chain Management              349\n",
      "Banking, Investment And Insurance    338\n",
      "Travel and Tourism                   203\n",
      "Media and Advertising                203\n",
      "International Business               178\n",
      "Healthcare Management                159\n",
      "Hospitality Management               114\n",
      "E-COMMERCE                           112\n",
      "Retail Management                    100\n",
      "Rural and Agribusiness                73\n",
      "E-Business                            57\n",
      "Services Excellence                   40\n",
      "Name: Specialization, dtype: int64\n",
      "Will revert after reading the email                  2072\n",
      "Ringing                                              1203\n",
      "Interested in other courses                           513\n",
      "Already a student                                     465\n",
      "Closed by Horizzon                                    358\n",
      "switched off                                          240\n",
      "Busy                                                  186\n",
      "Lost to EINS                                          175\n",
      "Not doing further education                           145\n",
      "Interested  in full time MBA                          117\n",
      "Graduation in progress                                111\n",
      "invalid number                                         83\n",
      "Diploma holder (Not Eligible)                          63\n",
      "wrong number given                                     47\n",
      "opp hangup                                             33\n",
      "number not provided                                    27\n",
      "in touch with EINS                                     12\n",
      "Lost to Others                                          7\n",
      "Still Thinking                                          6\n",
      "Want to take admission but has financial problems       6\n",
      "Interested in Next batch                                5\n",
      "In confusion whether part time or DLP                   5\n",
      "Lateral student                                         3\n",
      "University not recognized                               2\n",
      "Shall take in the next coming month                     2\n",
      "Recognition issue (DEC approval)                        1\n",
      "Name: Tags, dtype: int64\n",
      "Google               2868\n",
      "Direct Traffic       2543\n",
      "Olark Chat           1755\n",
      "Organic Search       1154\n",
      "Reference             534\n",
      "Welingak Website      142\n",
      "Referral Sites        125\n",
      "Facebook               55\n",
      "bing                    6\n",
      "google                  5\n",
      "Click2call              4\n",
      "Press_Release           2\n",
      "Live Chat               2\n",
      "Social Media            2\n",
      "youtubechannel          1\n",
      "testone                 1\n",
      "NC_EDM                  1\n",
      "Pay per Click Ads       1\n",
      "blog                    1\n",
      "WeLearn                 1\n",
      "welearnblog_Home        1\n",
      "Name: Lead Source, dtype: int64\n",
      "Email Opened                    3437\n",
      "SMS Sent                        2745\n",
      "Olark Chat Conversation          973\n",
      "Page Visited on Website          640\n",
      "Converted to Lead                428\n",
      "Email Bounced                    326\n",
      "Email Link Clicked               267\n",
      "Form Submitted on Website        116\n",
      "Unreachable                       93\n",
      "Unsubscribed                      61\n",
      "Had a Phone Conversation          30\n",
      "Approached upfront                 9\n",
      "View in browser link Clicked       6\n",
      "Email Received                     2\n",
      "Email Marked Spam                  2\n",
      "Visited Booth in Tradeshow         1\n",
      "Resubscribed to emails             1\n",
      "Name: Last Activity, dtype: int64\n",
      "Modified                        3407\n",
      "Email Opened                    2827\n",
      "SMS Sent                        2172\n",
      "Page Visited on Website          318\n",
      "Olark Chat Conversation          183\n",
      "Email Link Clicked               173\n",
      "Email Bounced                     60\n",
      "Unsubscribed                      47\n",
      "Unreachable                       32\n",
      "Had a Phone Conversation          14\n",
      "Email Marked Spam                  2\n",
      "Form Submitted on Website          1\n",
      "Email Received                     1\n",
      "View in browser link Clicked       1\n",
      "Resubscribed to emails             1\n",
      "Approached upfront                 1\n",
      "Name: Last Notable Activity, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# checking for type of unique values in categorical columns\n",
    "\n",
    "print(data['City'].value_counts())\n",
    "print(data['Specialization'].value_counts())\n",
    "print(data['Tags'].value_counts())\n",
    "print(data['Lead Source'].value_counts())\n",
    "print(data['Last Activity'].value_counts())\n",
    "print(data['Last Notable Activity'].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 669,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/pandas/core/generic.py:6786: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self._update_inplace(new_data)\n"
     ]
    }
   ],
   "source": [
    "# Imputing missing values by most occuring category in each categorical variable. replacing missing values with mode\n",
    "\n",
    "data3['Country'].replace(\n",
    "    to_replace=np.nan,\n",
    "    value='India',\n",
    "    inplace=True,\n",
    "    limit=None,\n",
    "    regex=False,\n",
    "    method='pad',\n",
    ")\n",
    "\n",
    "data3['City'].replace(\n",
    "    to_replace=np.nan,\n",
    "    value='Mumbai',\n",
    "    inplace=True,\n",
    "    limit=None,\n",
    "    regex=False,\n",
    "    method='pad',\n",
    ")\n",
    "\n",
    "data3['Tags'].replace(\n",
    "    to_replace=np.nan,\n",
    "    value='Will revert after reading the email',\n",
    "    inplace=True,\n",
    "    limit=None,\n",
    "    regex=False,\n",
    "    method='pad',\n",
    ")\n",
    "\n",
    "data3['Specialization'].replace(\n",
    "    to_replace=np.nan,\n",
    "    value='Finance Management',\n",
    "    inplace=True,\n",
    "    limit=None,\n",
    "    regex=False,\n",
    "    method='pad',\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Prospect ID                                 0\n",
       "Lead Number                                 0\n",
       "Lead Origin                                 0\n",
       "Lead Source                                 0\n",
       "Do Not Email                                0\n",
       "Do Not Call                                 0\n",
       "Converted                                   0\n",
       "TotalVisits                                 0\n",
       "Total Time Spent on Website                 0\n",
       "Page Views Per Visit                        0\n",
       "Last Activity                               0\n",
       "Country                                     0\n",
       "Specialization                              0\n",
       "Search                                      0\n",
       "Magazine                                    0\n",
       "Newspaper Article                           0\n",
       "X Education Forums                          0\n",
       "Newspaper                                   0\n",
       "Digital Advertisement                       0\n",
       "Through Recommendations                     0\n",
       "Receive More Updates About Our Courses      0\n",
       "Tags                                        0\n",
       "Update me on Supply Chain Content           0\n",
       "Get updates on DM Content                   0\n",
       "City                                        0\n",
       "I agree to pay the amount through cheque    0\n",
       "A free copy of Mastering The Interview      0\n",
       "Last Notable Activity                       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#checking for missing values\n",
    "\n",
    "data3.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 670,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "India     8787\n",
       "Others     287\n",
       "Name: Country, dtype: int64"
      ]
     },
     "execution_count": 670,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging the categories in the categorical variables to reduce number of categories as some of categories are very low in numbers.\n",
    "\n",
    "def country(x):\n",
    "    if x == 'India':\n",
    "        return 'India'\n",
    "    else:\n",
    "        return 'Others'\n",
    "    \n",
    "data3['Country'] = data3['Country'].apply(country)\n",
    "data3['Country'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 671,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:9: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if __name__ == '__main__':\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Metro     7874\n",
       "Others    1200\n",
       "Name: City, dtype: int64"
      ]
     },
     "execution_count": 671,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging the categories in the categorical variables to reduce number of categories as some of categories are very low in numbers.\n",
    "\n",
    "def city(y):\n",
    "    if y == 'Mumbai' or y == 'Thane & Outskirts' or y == 'Other Metro Cities':\n",
    "        return 'Metro'\n",
    "    else:\n",
    "        return 'Others'\n",
    "    \n",
    "data3['City'] = data3['City'].apply(city)\n",
    "data3['City'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 672,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:11: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  # This is added back by InteractiveShellApp.init_path()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "strong demand      6799\n",
       "Moderate demand    1451\n",
       "weak demand         824\n",
       "Name: Specialization, dtype: int64"
      ]
     },
     "execution_count": 672,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging the categories in the categorical variables to reduce number of categories as some of categories are very low in numbers.\n",
    "\n",
    "def specialization(y):\n",
    "    if y == 'Finance Management' or y == 'Human Resource Management' or y == 'Marketing Management' or y == 'Operations Management' or y == 'Business Administration':\n",
    "        return 'strong demand'\n",
    "    elif y == 'IT Projects Management' or y == 'Supply Chain Management' or y == 'Banking, Investment And Insurance' or y == 'Travel and Tourism' or y == 'Media and Advertising':\n",
    "        return 'Moderate demand'\n",
    "    else:\n",
    "        return 'weak demand'\n",
    "    \n",
    "data3['Specialization'] = data3['Specialization'].apply(specialization)\n",
    "data3['Specialization'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 673,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:12: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  if sys.path[0] == '':\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "alive           7511\n",
       "lost             876\n",
       "unresponsive     687\n",
       "Name: Tags, dtype: int64"
      ]
     },
     "execution_count": 673,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging the categories in the categorical variables to reduce number of categories as some of categories are very low in numbers.\n",
    "\n",
    "\n",
    "def tags(y):\n",
    "    if y == 'Will revert after reading the email' or y == 'Ringing' or y == 'Interested in other courses' or y == 'Already a student' or y == 'Interested in Next batch' or y == 'Shall take in the next coming month':\n",
    "        return 'alive'\n",
    "    elif y == 'Closed by Horizzon' or y == 'Lost to EINS' or y == 'Not doing further education' or y == 'invalid number' or y == 'wrong number given' or y == 'opp hangup' or y == 'Lost to Others' or y == 'Diploma holder (Not Eligible)' or y == 'number not provided':\n",
    "        return 'lost'\n",
    "    else:\n",
    "        return 'unresponsive'\n",
    "    \n",
    "data3['Tags'] = data3['Tags'].apply(tags)\n",
    "data3['Tags'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 674,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:16: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  app.launch_new_instance()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Google            2868\n",
       "Direct Traffic    2543\n",
       "Olark Chat        1753\n",
       "Organic Search    1154\n",
       "Others             756\n",
       "Name: Lead Source, dtype: int64"
      ]
     },
     "execution_count": 674,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging the categories in the categorical variables to reduce number of categories as some of categories are very low in numbers.\n",
    "\n",
    "\n",
    "def ls(y):\n",
    "    if y == 'Google':\n",
    "        return 'Google'\n",
    "    elif y == 'Direct Traffic':\n",
    "        return 'Direct Traffic'\n",
    "    elif y == 'Olark Chat':\n",
    "        return 'Olark Chat'\n",
    "    elif y == 'Organic Search':\n",
    "        return 'Organic Search'\n",
    "    else:\n",
    "        return 'Others'\n",
    "    \n",
    "data3['Lead Source'] = data3['Lead Source'].apply(ls)\n",
    "data3['Lead Source'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 675,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:13: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  del sys.path[0]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Modified          3267\n",
       "Email Opened      2823\n",
       "SMS Sent          2152\n",
       "Other activity     832\n",
       "Name: Last Notable Activity, dtype: int64"
      ]
     },
     "execution_count": 675,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Rearranging the categories in the categorical variables to reduce number of categories as some of categories are very low in numbers.\n",
    "\n",
    "def lna(y):\n",
    "    if y == 'Modified':\n",
    "        return 'Modified'\n",
    "    elif y == 'Email Opened':\n",
    "        return 'Email Opened'\n",
    "    elif y == 'SMS Sent':\n",
    "        return 'SMS Sent'\n",
    "    else:\n",
    "        return 'Other activity'\n",
    "    \n",
    "data3['Last Notable Activity'] = data3['Last Notable Activity'].apply(lna)\n",
    "data3['Last Notable Activity'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Prospect ID', 'Lead Number', 'Lead Origin', 'Lead Source',\n",
       "       'Do Not Email', 'Do Not Call', 'Converted', 'TotalVisits',\n",
       "       'Total Time Spent on Website', 'Page Views Per Visit', 'Last Activity',\n",
       "       'Country', 'Specialization', 'Search', 'Magazine', 'Newspaper Article',\n",
       "       'X Education Forums', 'Newspaper', 'Digital Advertisement',\n",
       "       'Through Recommendations', 'Receive More Updates About Our Courses',\n",
       "       'Tags', 'Update me on Supply Chain Content',\n",
       "       'Get updates on DM Content', 'City',\n",
       "       'I agree to pay the amount through cheque',\n",
       "       'A free copy of Mastering The Interview', 'Last Notable Activity'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data3.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9074\n",
      "9074\n",
      "4\n",
      "5\n",
      "2\n",
      "2\n",
      "2\n",
      "41\n",
      "1717\n",
      "114\n",
      "17\n",
      "2\n",
      "3\n",
      "2\n",
      "1\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "1\n",
      "3\n",
      "1\n",
      "1\n",
      "2\n",
      "1\n",
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "# checking for number of unique values in each column\n",
    "\n",
    "for i in data3.columns:\n",
    "    print(data3[i].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 676,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>...</th>\n",
       "      <th>Search</th>\n",
       "      <th>Newspaper Article</th>\n",
       "      <th>X Education Forums</th>\n",
       "      <th>Newspaper</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>Tags</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  ... Search  \\\n",
       "0                            0                   0.0  ...     No   \n",
       "1                          674                   2.5  ...     No   \n",
       "2                         1532                   2.0  ...     No   \n",
       "3                          305                   1.0  ...     No   \n",
       "4                         1428                   1.0  ...     No   \n",
       "\n",
       "  Newspaper Article X Education Forums Newspaper Digital Advertisement  \\\n",
       "0                No                 No        No                    No   \n",
       "1                No                 No        No                    No   \n",
       "2                No                 No        No                    No   \n",
       "3                No                 No        No                    No   \n",
       "4                No                 No        No                    No   \n",
       "\n",
       "  Through Recommendations   Tags   City  \\\n",
       "0                      No  alive  Metro   \n",
       "1                      No  alive  Metro   \n",
       "2                      No  alive  Metro   \n",
       "3                      No  alive  Metro   \n",
       "4                      No  alive  Metro   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 676,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing columns with only one unique value\n",
    "# Columns Last Activity and Last Notable Activity give out similar outcome. Since Last notable activity may have considerable influence, we are dropping Last activity column\n",
    "final_data = data3.drop(columns = ['Magazine','Receive More Updates About Our Courses','Update me on Supply Chain Content','Get updates on DM Content','I agree to pay the amount through cheque','Last Activity'])\n",
    "final_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 677,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9074\n",
      "9074\n",
      "4\n",
      "5\n",
      "2\n",
      "2\n",
      "2\n",
      "41\n",
      "1717\n",
      "114\n",
      "2\n",
      "3\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "2\n",
      "3\n",
      "2\n",
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "# checking for number of unique values in each column\n",
    "\n",
    "for i in final_data.columns:\n",
    "    print(final_data[i].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 678,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No     8358\n",
      "Yes     716\n",
      "Name: Do Not Email, dtype: int64\n",
      "No     9072\n",
      "Yes       2\n",
      "Name: Do Not Call, dtype: int64\n",
      "0    5639\n",
      "1    3435\n",
      "Name: Converted, dtype: int64\n",
      "India     8787\n",
      "Others     287\n",
      "Name: Country, dtype: int64\n",
      "strong demand      6799\n",
      "Moderate demand    1451\n",
      "weak demand         824\n",
      "Name: Specialization, dtype: int64\n",
      "No     9060\n",
      "Yes      14\n",
      "Name: Search, dtype: int64\n",
      "No     9072\n",
      "Yes       2\n",
      "Name: Newspaper Article, dtype: int64\n",
      "No     9073\n",
      "Yes       1\n",
      "Name: X Education Forums, dtype: int64\n",
      "No     9073\n",
      "Yes       1\n",
      "Name: Newspaper, dtype: int64\n",
      "No     9070\n",
      "Yes       4\n",
      "Name: Digital Advertisement, dtype: int64\n",
      "No     9067\n",
      "Yes       7\n",
      "Name: Through Recommendations, dtype: int64\n",
      "alive           7511\n",
      "lost             876\n",
      "unresponsive     687\n",
      "Name: Tags, dtype: int64\n",
      "Metro     7874\n",
      "Others    1200\n",
      "Name: City, dtype: int64\n",
      "No     6186\n",
      "Yes    2888\n",
      "Name: A free copy of Mastering The Interview, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "# checking for number and type of unique values in each categorical variables\n",
    "\n",
    "for i in final_data.iloc[:,[4,5,6,10,11,12,13,14,15,16,17,18,19,20]].columns:\n",
    "    print(final_data[i].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 710,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Country</th>\n",
       "      <th>Specialization</th>\n",
       "      <th>Tags</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>India</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>India</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>India</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>India</td>\n",
       "      <td>Moderate demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>India</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>Metro</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          0          0.0   \n",
       "1  Organic Search           No          0          5.0   \n",
       "2  Direct Traffic           No          1          2.0   \n",
       "3  Direct Traffic           No          0          1.0   \n",
       "4          Google           No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit Country   Specialization  \\\n",
       "0                            0                   0.0   India    strong demand   \n",
       "1                          674                   2.5   India    strong demand   \n",
       "2                         1532                   2.0   India    strong demand   \n",
       "3                          305                   1.0   India  Moderate demand   \n",
       "4                         1428                   1.0   India    strong demand   \n",
       "\n",
       "    Tags   City A free copy of Mastering The Interview Last Notable Activity  \n",
       "0  alive  Metro                                     No              Modified  \n",
       "1  alive  Metro                                     No          Email Opened  \n",
       "2  alive  Metro                                    Yes          Email Opened  \n",
       "3  alive  Metro                                     No              Modified  \n",
       "4  alive  Metro                                     No              Modified  "
      ]
     },
     "execution_count": 710,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#removing the highly skewed columns from above\n",
    "final = final_data.drop(columns = ['Do Not Call','Search','Newspaper Article','X Education Forums','Newspaper','Digital Advertisement','Through Recommendations'])\n",
    "final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 711,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9074\n",
      "9074\n",
      "4\n",
      "5\n",
      "2\n",
      "2\n",
      "41\n",
      "1717\n",
      "114\n",
      "2\n",
      "3\n",
      "3\n",
      "2\n",
      "2\n",
      "4\n"
     ]
    }
   ],
   "source": [
    "# checking for number of unique values in each column\n",
    "\n",
    "for i in final.columns:\n",
    "    print(final[i].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 712,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Do Not Email', 'Converted', 'Country', 'Specialization', 'Tags',\n",
       "       'City', 'A free copy of Mastering The Interview'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 712,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.iloc[:,[4,5,9,10,11,12,13]].columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 713,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Do Not Email                              0        No\\n1        No\\n2        No\\n3      ...\n",
       "Converted                                 0       0\\n1       0\\n2       1\\n3       0\\n4 ...\n",
       "Country                                   0        India\\n1        India\\n2        India...\n",
       "Specialization                            0         strong demand\\n1         strong dema...\n",
       "Tags                                      0       alive\\n1       alive\\n2       alive\\n3...\n",
       "City                                      0        Metro\\n1        Metro\\n2        Metro...\n",
       "A free copy of Mastering The Interview    0        No\\n1        No\\n2       Yes\\n3      ...\n",
       "dtype: object"
      ]
     },
     "execution_count": 713,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# converting a few categorical values to strings to convert them to binary variables\n",
    "\n",
    "final.iloc[:,[4,5,9,10,11,12,13]].apply(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 714,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Country</th>\n",
       "      <th>Specialization</th>\n",
       "      <th>Tags</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>Moderate demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>strong demand</td>\n",
       "      <td>alive</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source  Do Not Email  Converted  TotalVisits  \\\n",
       "0      Olark Chat             0          0          0.0   \n",
       "1  Organic Search             0          0          5.0   \n",
       "2  Direct Traffic             0          1          2.0   \n",
       "3  Direct Traffic             0          0          1.0   \n",
       "4          Google             0          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  Country  \\\n",
       "0                            0                   0.0        1   \n",
       "1                          674                   2.5        1   \n",
       "2                         1532                   2.0        1   \n",
       "3                          305                   1.0        1   \n",
       "4                         1428                   1.0        1   \n",
       "\n",
       "    Specialization   Tags  City  A free copy of Mastering The Interview  \\\n",
       "0    strong demand  alive     1                                       0   \n",
       "1    strong demand  alive     1                                       0   \n",
       "2    strong demand  alive     1                                       1   \n",
       "3  Moderate demand  alive     1                                       0   \n",
       "4    strong demand  alive     1                                       0   \n",
       "\n",
       "  Last Notable Activity  \n",
       "0              Modified  \n",
       "1          Email Opened  \n",
       "2          Email Opened  \n",
       "3              Modified  \n",
       "4              Modified  "
      ]
     },
     "execution_count": 714,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  converting categorical variables with only two variables into binary variables\n",
    "\n",
    "vars_list = ['Do Not Email', 'A free copy of Mastering The Interview','Country','City']\n",
    "\n",
    "def binary_map(x):\n",
    "    return x.map({'Yes': 1,'No': 0,'India':1,'Others': 0,'Metro':1,'Others':0})\n",
    "\n",
    "final[vars_list] = final[vars_list].apply(binary_map)\n",
    "final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 715,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9074, 15)"
      ]
     },
     "execution_count": 715,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 716,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Landing Page Submission    4885\n",
      "API                        3578\n",
      "Lead Add Form               581\n",
      "Lead Import                  30\n",
      "Name: Lead Origin, dtype: int64\n",
      "Google            2868\n",
      "Direct Traffic    2543\n",
      "Olark Chat        1753\n",
      "Organic Search    1154\n",
      "Others             756\n",
      "Name: Lead Source, dtype: int64\n",
      "0    8358\n",
      "1     716\n",
      "Name: Do Not Email, dtype: int64\n",
      "0    5639\n",
      "1    3435\n",
      "Name: Converted, dtype: int64\n",
      "1    8787\n",
      "0     287\n",
      "Name: Country, dtype: int64\n",
      "strong demand      6799\n",
      "Moderate demand    1451\n",
      "weak demand         824\n",
      "Name: Specialization, dtype: int64\n",
      "alive           7511\n",
      "lost             876\n",
      "unresponsive     687\n",
      "Name: Tags, dtype: int64\n",
      "1    7874\n",
      "0    1200\n",
      "Name: City, dtype: int64\n",
      "0    6186\n",
      "1    2888\n",
      "Name: A free copy of Mastering The Interview, dtype: int64\n",
      "Modified          3267\n",
      "Email Opened      2823\n",
      "SMS Sent          2152\n",
      "Other activity     832\n",
      "Name: Last Notable Activity, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#checking for type and number of unique values in each categorical column\n",
    "\n",
    "for i in final.iloc[:,[2,3,4,5,9,10,11,12,13,14]].columns:\n",
    "    print(final[i].value_counts())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 717,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Country</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>...</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Others</th>\n",
       "      <th>Specialization_strong demand</th>\n",
       "      <th>Specialization_weak demand</th>\n",
       "      <th>Tags_lost</th>\n",
       "      <th>Tags_unresponsive</th>\n",
       "      <th>Last Notable Activity_Modified</th>\n",
       "      <th>Last Notable Activity_Other activity</th>\n",
       "      <th>Last Notable Activity_SMS Sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number  Do Not Email  Converted  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737             0          0   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728             0          0   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727             0          1   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719             0          0   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681             0          1   \n",
       "\n",
       "   TotalVisits  Total Time Spent on Website  Page Views Per Visit  Country  \\\n",
       "0          0.0                            0                   0.0        1   \n",
       "1          5.0                          674                   2.5        1   \n",
       "2          2.0                         1532                   2.0        1   \n",
       "3          1.0                          305                   1.0        1   \n",
       "4          2.0                         1428                   1.0        1   \n",
       "\n",
       "   City  A free copy of Mastering The Interview  ...  Lead Source_Olark Chat  \\\n",
       "0     1                                       0  ...                       1   \n",
       "1     1                                       0  ...                       0   \n",
       "2     1                                       1  ...                       0   \n",
       "3     1                                       0  ...                       0   \n",
       "4     1                                       0  ...                       0   \n",
       "\n",
       "   Lead Source_Organic Search  Lead Source_Others  \\\n",
       "0                           0                   0   \n",
       "1                           1                   0   \n",
       "2                           0                   0   \n",
       "3                           0                   0   \n",
       "4                           0                   0   \n",
       "\n",
       "   Specialization_strong demand  Specialization_weak demand  Tags_lost  \\\n",
       "0                             1                           0          0   \n",
       "1                             1                           0          0   \n",
       "2                             1                           0          0   \n",
       "3                             0                           0          0   \n",
       "4                             1                           0          0   \n",
       "\n",
       "   Tags_unresponsive  Last Notable Activity_Modified  \\\n",
       "0                  0                               1   \n",
       "1                  0                               0   \n",
       "2                  0                               0   \n",
       "3                  0                               1   \n",
       "4                  0                               1   \n",
       "\n",
       "   Last Notable Activity_Other activity  Last Notable Activity_SMS Sent  \n",
       "0                                     0                               0  \n",
       "1                                     0                               0  \n",
       "2                                     0                               0  \n",
       "3                                     0                               0  \n",
       "4                                     0                               0  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 717,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# getting dummy variables for other categorical variables\n",
    "\n",
    "final = pd.get_dummies(final,columns = ['Lead Origin','Lead Source','Specialization','Tags','Last Notable Activity'],drop_first=True)\n",
    "final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 718,
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining independent variable X\n",
    "\n",
    "X = final.drop(columns = ['Converted','Prospect ID','Lead Number'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 719,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    1\n",
       "3    0\n",
       "4    1\n",
       "Name: Converted, dtype: int64"
      ]
     },
     "execution_count": 719,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# defining dependent variable y\n",
    "\n",
    "y = final['Converted']\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 720,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Country</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>...</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Others</th>\n",
       "      <th>Specialization_strong demand</th>\n",
       "      <th>Specialization_weak demand</th>\n",
       "      <th>Tags_lost</th>\n",
       "      <th>Tags_unresponsive</th>\n",
       "      <th>Last Notable Activity_Modified</th>\n",
       "      <th>Last Notable Activity_Other activity</th>\n",
       "      <th>Last Notable Activity_SMS Sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3009</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>397</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1012</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>190</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9226</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4750</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1380</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7987</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>1584</td>\n",
       "      <td>2.5</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Do Not Email  TotalVisits  Total Time Spent on Website  \\\n",
       "3009             0          2.0                          397   \n",
       "1012             1          2.0                          190   \n",
       "9226             0          0.0                            0   \n",
       "4750             0          2.0                         1380   \n",
       "7987             0          5.0                         1584   \n",
       "\n",
       "      Page Views Per Visit  Country  City  \\\n",
       "3009                   2.0        1     1   \n",
       "1012                   2.0        1     1   \n",
       "9226                   0.0        1     1   \n",
       "4750                   2.0        1     0   \n",
       "7987                   2.5        1     0   \n",
       "\n",
       "      A free copy of Mastering The Interview  \\\n",
       "3009                                       1   \n",
       "1012                                       0   \n",
       "9226                                       0   \n",
       "4750                                       0   \n",
       "7987                                       0   \n",
       "\n",
       "      Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "3009                                    1                          0   \n",
       "1012                                    1                          0   \n",
       "9226                                    0                          0   \n",
       "4750                                    1                          0   \n",
       "7987                                    1                          0   \n",
       "\n",
       "      Lead Origin_Lead Import  ...  Lead Source_Olark Chat  \\\n",
       "3009                        0  ...                       0   \n",
       "1012                        0  ...                       0   \n",
       "9226                        0  ...                       1   \n",
       "4750                        0  ...                       0   \n",
       "7987                        0  ...                       0   \n",
       "\n",
       "      Lead Source_Organic Search  Lead Source_Others  \\\n",
       "3009                           0                   0   \n",
       "1012                           0                   0   \n",
       "9226                           0                   0   \n",
       "4750                           0                   0   \n",
       "7987                           0                   0   \n",
       "\n",
       "      Specialization_strong demand  Specialization_weak demand  Tags_lost  \\\n",
       "3009                             1                           0          0   \n",
       "1012                             1                           0          0   \n",
       "9226                             1                           0          0   \n",
       "4750                             1                           0          0   \n",
       "7987                             1                           0          1   \n",
       "\n",
       "      Tags_unresponsive  Last Notable Activity_Modified  \\\n",
       "3009                  0                               0   \n",
       "1012                  0                               0   \n",
       "9226                  0                               1   \n",
       "4750                  0                               0   \n",
       "7987                  0                               1   \n",
       "\n",
       "      Last Notable Activity_Other activity  Last Notable Activity_SMS Sent  \n",
       "3009                                     0                               0  \n",
       "1012                                     1                               0  \n",
       "9226                                     0                               0  \n",
       "4750                                     0                               1  \n",
       "7987                                     0                               0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 720,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Dividing the data set to train and test\n",
    "\n",
    "X_train,X_test,y_train,y_test = train_test_split(X, y,train_size=0.70, test_size=0.30, random_state=100)\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 721,
   "metadata": {},
   "outputs": [],
   "source": [
    "# scaling of numerical variables\n",
    "scaler = StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 722,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:494: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Country</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>...</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Others</th>\n",
       "      <th>Specialization_strong demand</th>\n",
       "      <th>Specialization_weak demand</th>\n",
       "      <th>Tags_lost</th>\n",
       "      <th>Tags_unresponsive</th>\n",
       "      <th>Last Notable Activity_Modified</th>\n",
       "      <th>Last Notable Activity_Other activity</th>\n",
       "      <th>Last Notable Activity_SMS Sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3009</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.284595</td>\n",
       "      <td>-0.160255</td>\n",
       "      <td>-0.179666</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1012</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.284595</td>\n",
       "      <td>-0.540048</td>\n",
       "      <td>-0.179666</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9226</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.671384</td>\n",
       "      <td>-0.888650</td>\n",
       "      <td>-1.132538</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4750</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.284595</td>\n",
       "      <td>1.643304</td>\n",
       "      <td>-0.179666</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7987</td>\n",
       "      <td>0</td>\n",
       "      <td>0.295588</td>\n",
       "      <td>2.017593</td>\n",
       "      <td>0.058552</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Do Not Email  TotalVisits  Total Time Spent on Website  \\\n",
       "3009             0    -0.284595                    -0.160255   \n",
       "1012             1    -0.284595                    -0.540048   \n",
       "9226             0    -0.671384                    -0.888650   \n",
       "4750             0    -0.284595                     1.643304   \n",
       "7987             0     0.295588                     2.017593   \n",
       "\n",
       "      Page Views Per Visit  Country  City  \\\n",
       "3009             -0.179666        1     1   \n",
       "1012             -0.179666        1     1   \n",
       "9226             -1.132538        1     1   \n",
       "4750             -0.179666        1     0   \n",
       "7987              0.058552        1     0   \n",
       "\n",
       "      A free copy of Mastering The Interview  \\\n",
       "3009                                       1   \n",
       "1012                                       0   \n",
       "9226                                       0   \n",
       "4750                                       0   \n",
       "7987                                       0   \n",
       "\n",
       "      Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "3009                                    1                          0   \n",
       "1012                                    1                          0   \n",
       "9226                                    0                          0   \n",
       "4750                                    1                          0   \n",
       "7987                                    1                          0   \n",
       "\n",
       "      Lead Origin_Lead Import  ...  Lead Source_Olark Chat  \\\n",
       "3009                        0  ...                       0   \n",
       "1012                        0  ...                       0   \n",
       "9226                        0  ...                       1   \n",
       "4750                        0  ...                       0   \n",
       "7987                        0  ...                       0   \n",
       "\n",
       "      Lead Source_Organic Search  Lead Source_Others  \\\n",
       "3009                           0                   0   \n",
       "1012                           0                   0   \n",
       "9226                           0                   0   \n",
       "4750                           0                   0   \n",
       "7987                           0                   0   \n",
       "\n",
       "      Specialization_strong demand  Specialization_weak demand  Tags_lost  \\\n",
       "3009                             1                           0          0   \n",
       "1012                             1                           0          0   \n",
       "9226                             1                           0          0   \n",
       "4750                             1                           0          0   \n",
       "7987                             1                           0          1   \n",
       "\n",
       "      Tags_unresponsive  Last Notable Activity_Modified  \\\n",
       "3009                  0                               0   \n",
       "1012                  0                               0   \n",
       "9226                  0                               1   \n",
       "4750                  0                               0   \n",
       "7987                  0                               1   \n",
       "\n",
       "      Last Notable Activity_Other activity  Last Notable Activity_SMS Sent  \n",
       "3009                                     0                               0  \n",
       "1012                                     1                               0  \n",
       "9226                                     0                               0  \n",
       "4750                                     0                               1  \n",
       "7987                                     0                               0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 722,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "\n",
    "X_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.fit_transform(X_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']])\n",
    "\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 723,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6351, 21)"
      ]
     },
     "execution_count": 723,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 724,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1fe23650>"
      ]
     },
     "execution_count": 724,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plotting correlation heat map\n",
    "\n",
    "plt.figure(figsize = (20,10))\n",
    "sns.heatmap(X.corr(),annot = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 725,
   "metadata": {},
   "outputs": [],
   "source": [
    "# persforming logistic regression on scikit learn\n",
    "\n",
    "lgrsk = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 726,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RFE(estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,\n",
       "                                 fit_intercept=True, intercept_scaling=1,\n",
       "                                 l1_ratio=None, max_iter=100,\n",
       "                                 multi_class='warn', n_jobs=None, penalty='l2',\n",
       "                                 random_state=None, solver='warn', tol=0.0001,\n",
       "                                 verbose=0, warm_start=False),\n",
       "    n_features_to_select=15, step=1, verbose=0)"
      ]
     },
     "execution_count": 726,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfe = RFE(lgrsk,15)\n",
    "rfe.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 727,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True, False,  True, False, False,  True, False,  True,  True,\n",
       "        True,  True,  True, False,  True,  True, False,  True,  True,\n",
       "        True,  True,  True])"
      ]
     },
     "execution_count": 727,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfe.support_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 728,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Do Not Email', True, 1),\n",
       " ('TotalVisits', False, 3),\n",
       " ('Total Time Spent on Website', True, 1),\n",
       " ('Page Views Per Visit', False, 6),\n",
       " ('Country', False, 5),\n",
       " ('City', True, 1),\n",
       " ('A free copy of Mastering The Interview', False, 7),\n",
       " ('Lead Origin_Landing Page Submission', True, 1),\n",
       " ('Lead Origin_Lead Add Form', True, 1),\n",
       " ('Lead Origin_Lead Import', True, 1),\n",
       " ('Lead Source_Google', True, 1),\n",
       " ('Lead Source_Olark Chat', True, 1),\n",
       " ('Lead Source_Organic Search', False, 4),\n",
       " ('Lead Source_Others', True, 1),\n",
       " ('Specialization_strong demand', True, 1),\n",
       " ('Specialization_weak demand', False, 2),\n",
       " ('Tags_lost', True, 1),\n",
       " ('Tags_unresponsive', True, 1),\n",
       " ('Last Notable Activity_Modified', True, 1),\n",
       " ('Last Notable Activity_Other activity', True, 1),\n",
       " ('Last Notable Activity_SMS Sent', True, 1)]"
      ]
     },
     "execution_count": 728,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(zip(X_train.columns,rfe.support_,rfe.ranking_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 729,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defining col as list of columns given by RFE\n",
    "col = X_train.columns[rfe.support_]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 730,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Do Not Email', 'Total Time Spent on Website', 'City',\n",
       "       'Lead Origin_Landing Page Submission', 'Lead Origin_Lead Add Form',\n",
       "       'Lead Origin_Lead Import', 'Lead Source_Google',\n",
       "       'Lead Source_Olark Chat', 'Lead Source_Others',\n",
       "       'Specialization_strong demand', 'Tags_lost', 'Tags_unresponsive',\n",
       "       'Last Notable Activity_Modified',\n",
       "       'Last Notable Activity_Other activity',\n",
       "       'Last Notable Activity_SMS Sent'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 730,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 731,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6351</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6335</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    15</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2776.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Mon, 20 Apr 2020</td> <th>  Deviance:          </th> <td>  5552.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>22:06:12</td>     <th>  Pearson chi2:      </th> <td>6.70e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>6</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                    <td></td>                      <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                <td>   -0.7544</td> <td>    0.152</td> <td>   -4.959</td> <td> 0.000</td> <td>   -1.053</td> <td>   -0.456</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                         <td>   -1.4146</td> <td>    0.169</td> <td>   -8.365</td> <td> 0.000</td> <td>   -1.746</td> <td>   -1.083</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>          <td>    1.1440</td> <td>    0.040</td> <td>   28.672</td> <td> 0.000</td> <td>    1.066</td> <td>    1.222</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City</th>                                 <td>   -0.2200</td> <td>    0.102</td> <td>   -2.150</td> <td> 0.032</td> <td>   -0.421</td> <td>   -0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Landing Page Submission</th>  <td>   -0.2278</td> <td>    0.093</td> <td>   -2.445</td> <td> 0.014</td> <td>   -0.410</td> <td>   -0.045</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>            <td>    4.2664</td> <td>    0.344</td> <td>   12.407</td> <td> 0.000</td> <td>    3.592</td> <td>    4.940</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Import</th>              <td>    1.5352</td> <td>    0.520</td> <td>    2.954</td> <td> 0.003</td> <td>    0.516</td> <td>    2.554</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                   <td>    0.3889</td> <td>    0.082</td> <td>    4.735</td> <td> 0.000</td> <td>    0.228</td> <td>    0.550</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>               <td>    1.0402</td> <td>    0.129</td> <td>    8.062</td> <td> 0.000</td> <td>    0.787</td> <td>    1.293</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Others</th>                   <td>    0.0818</td> <td>    0.283</td> <td>    0.289</td> <td> 0.772</td> <td>   -0.472</td> <td>    0.636</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Specialization_strong demand</th>         <td>   -0.1678</td> <td>    0.084</td> <td>   -2.006</td> <td> 0.045</td> <td>   -0.332</td> <td>   -0.004</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Tags_lost</th>                            <td>    1.0053</td> <td>    0.111</td> <td>    9.031</td> <td> 0.000</td> <td>    0.787</td> <td>    1.223</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Tags_unresponsive</th>                    <td>   -1.1569</td> <td>    0.152</td> <td>   -7.598</td> <td> 0.000</td> <td>   -1.455</td> <td>   -0.858</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_Modified</th>       <td>   -0.8382</td> <td>    0.086</td> <td>   -9.735</td> <td> 0.000</td> <td>   -1.007</td> <td>   -0.669</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_Other activity</th> <td>   -0.2982</td> <td>    0.129</td> <td>   -2.318</td> <td> 0.020</td> <td>   -0.550</td> <td>   -0.046</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_SMS Sent</th>       <td>    1.5231</td> <td>    0.088</td> <td>   17.274</td> <td> 0.000</td> <td>    1.350</td> <td>    1.696</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6351\n",
       "Model:                            GLM   Df Residuals:                     6335\n",
       "Model Family:                Binomial   Df Model:                           15\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2776.5\n",
       "Date:                Mon, 20 Apr 2020   Deviance:                       5552.9\n",
       "Time:                        22:06:12   Pearson chi2:                 6.70e+03\n",
       "No. Iterations:                     6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================\n",
       "                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------------------\n",
       "const                                   -0.7544      0.152     -4.959      0.000      -1.053      -0.456\n",
       "Do Not Email                            -1.4146      0.169     -8.365      0.000      -1.746      -1.083\n",
       "Total Time Spent on Website              1.1440      0.040     28.672      0.000       1.066       1.222\n",
       "City                                    -0.2200      0.102     -2.150      0.032      -0.421      -0.019\n",
       "Lead Origin_Landing Page Submission     -0.2278      0.093     -2.445      0.014      -0.410      -0.045\n",
       "Lead Origin_Lead Add Form                4.2664      0.344     12.407      0.000       3.592       4.940\n",
       "Lead Origin_Lead Import                  1.5352      0.520      2.954      0.003       0.516       2.554\n",
       "Lead Source_Google                       0.3889      0.082      4.735      0.000       0.228       0.550\n",
       "Lead Source_Olark Chat                   1.0402      0.129      8.062      0.000       0.787       1.293\n",
       "Lead Source_Others                       0.0818      0.283      0.289      0.772      -0.472       0.636\n",
       "Specialization_strong demand            -0.1678      0.084     -2.006      0.045      -0.332      -0.004\n",
       "Tags_lost                                1.0053      0.111      9.031      0.000       0.787       1.223\n",
       "Tags_unresponsive                       -1.1569      0.152     -7.598      0.000      -1.455      -0.858\n",
       "Last Notable Activity_Modified          -0.8382      0.086     -9.735      0.000      -1.007      -0.669\n",
       "Last Notable Activity_Other activity    -0.2982      0.129     -2.318      0.020      -0.550      -0.046\n",
       "Last Notable Activity_SMS Sent           1.5231      0.088     17.274      0.000       1.350       1.696\n",
       "========================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 731,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Performing logistic regression in statsmodels\n",
    "# Adding constant to X_train\n",
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "lgr1 = sm.GLM(y_train,X_train_sm,family = sm.families.Binomial())\n",
    "lgr1.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 732,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing the variable with high p-value\n",
    "\n",
    "col = col.drop('Lead Source_Others')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 733,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6351</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6336</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    14</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2776.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Mon, 20 Apr 2020</td> <th>  Deviance:          </th> <td>  5553.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>22:06:19</td>     <th>  Pearson chi2:      </th> <td>6.70e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>6</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                    <td></td>                      <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                <td>   -0.7491</td> <td>    0.151</td> <td>   -4.961</td> <td> 0.000</td> <td>   -1.045</td> <td>   -0.453</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                         <td>   -1.4151</td> <td>    0.169</td> <td>   -8.368</td> <td> 0.000</td> <td>   -1.747</td> <td>   -1.084</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>          <td>    1.1437</td> <td>    0.040</td> <td>   28.676</td> <td> 0.000</td> <td>    1.066</td> <td>    1.222</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>City</th>                                 <td>   -0.2195</td> <td>    0.102</td> <td>   -2.146</td> <td> 0.032</td> <td>   -0.420</td> <td>   -0.019</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Landing Page Submission</th>  <td>   -0.2313</td> <td>    0.092</td> <td>   -2.505</td> <td> 0.012</td> <td>   -0.412</td> <td>   -0.050</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>            <td>    4.3416</td> <td>    0.226</td> <td>   19.233</td> <td> 0.000</td> <td>    3.899</td> <td>    4.784</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Import</th>              <td>    1.6104</td> <td>    0.450</td> <td>    3.576</td> <td> 0.000</td> <td>    0.728</td> <td>    2.493</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                   <td>    0.3849</td> <td>    0.081</td> <td>    4.757</td> <td> 0.000</td> <td>    0.226</td> <td>    0.543</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>               <td>    1.0334</td> <td>    0.127</td> <td>    8.149</td> <td> 0.000</td> <td>    0.785</td> <td>    1.282</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Specialization_strong demand</th>         <td>   -0.1668</td> <td>    0.084</td> <td>   -1.997</td> <td> 0.046</td> <td>   -0.331</td> <td>   -0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Tags_lost</th>                            <td>    1.0041</td> <td>    0.111</td> <td>    9.027</td> <td> 0.000</td> <td>    0.786</td> <td>    1.222</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Tags_unresponsive</th>                    <td>   -1.1571</td> <td>    0.152</td> <td>   -7.600</td> <td> 0.000</td> <td>   -1.455</td> <td>   -0.859</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_Modified</th>       <td>   -0.8376</td> <td>    0.086</td> <td>   -9.731</td> <td> 0.000</td> <td>   -1.006</td> <td>   -0.669</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_Other activity</th> <td>   -0.2977</td> <td>    0.129</td> <td>   -2.314</td> <td> 0.021</td> <td>   -0.550</td> <td>   -0.046</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_SMS Sent</th>       <td>    1.5223</td> <td>    0.088</td> <td>   17.275</td> <td> 0.000</td> <td>    1.350</td> <td>    1.695</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6351\n",
       "Model:                            GLM   Df Residuals:                     6336\n",
       "Model Family:                Binomial   Df Model:                           14\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2776.5\n",
       "Date:                Mon, 20 Apr 2020   Deviance:                       5553.0\n",
       "Time:                        22:06:19   Pearson chi2:                 6.70e+03\n",
       "No. Iterations:                     6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================\n",
       "                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------------------\n",
       "const                                   -0.7491      0.151     -4.961      0.000      -1.045      -0.453\n",
       "Do Not Email                            -1.4151      0.169     -8.368      0.000      -1.747      -1.084\n",
       "Total Time Spent on Website              1.1437      0.040     28.676      0.000       1.066       1.222\n",
       "City                                    -0.2195      0.102     -2.146      0.032      -0.420      -0.019\n",
       "Lead Origin_Landing Page Submission     -0.2313      0.092     -2.505      0.012      -0.412      -0.050\n",
       "Lead Origin_Lead Add Form                4.3416      0.226     19.233      0.000       3.899       4.784\n",
       "Lead Origin_Lead Import                  1.6104      0.450      3.576      0.000       0.728       2.493\n",
       "Lead Source_Google                       0.3849      0.081      4.757      0.000       0.226       0.543\n",
       "Lead Source_Olark Chat                   1.0334      0.127      8.149      0.000       0.785       1.282\n",
       "Specialization_strong demand            -0.1668      0.084     -1.997      0.046      -0.331      -0.003\n",
       "Tags_lost                                1.0041      0.111      9.027      0.000       0.786       1.222\n",
       "Tags_unresponsive                       -1.1571      0.152     -7.600      0.000      -1.455      -0.859\n",
       "Last Notable Activity_Modified          -0.8376      0.086     -9.731      0.000      -1.006      -0.669\n",
       "Last Notable Activity_Other activity    -0.2977      0.129     -2.314      0.021      -0.550      -0.046\n",
       "Last Notable Activity_SMS Sent           1.5223      0.088     17.275      0.000       1.350       1.695\n",
       "========================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 733,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Performing logistic regression in statsmodels\n",
    "# Adding constant to X_train\n",
    "\n",
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "lgr2 = sm.GLM(y_train,X_train_sm,family = sm.families.Binomial())\n",
    "lgr2.fit().summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 734,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>City</td>\n",
       "      <td>5.64</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Specialization_strong demand</td>\n",
       "      <td>3.85</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Lead Origin_Landing Page Submission</td>\n",
       "      <td>2.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>2.23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Last Notable Activity_Modified</td>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>1.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>Last Notable Activity_SMS Sent</td>\n",
       "      <td>1.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>1.49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Last Notable Activity_Other activity</td>\n",
       "      <td>1.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>1.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Tags_lost</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Tags_unresponsive</td>\n",
       "      <td>1.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Lead Origin_Lead Import</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Features   VIF\n",
       "2                                   City  5.64\n",
       "8           Specialization_strong demand  3.85\n",
       "3    Lead Origin_Landing Page Submission  2.44\n",
       "7                 Lead Source_Olark Chat  2.23\n",
       "11        Last Notable Activity_Modified  2.15\n",
       "6                     Lead Source_Google  1.84\n",
       "13        Last Notable Activity_SMS Sent  1.77\n",
       "4              Lead Origin_Lead Add Form  1.49\n",
       "12  Last Notable Activity_Other activity  1.32\n",
       "1            Total Time Spent on Website  1.31\n",
       "9                              Tags_lost  1.20\n",
       "0                           Do Not Email  1.19\n",
       "10                     Tags_unresponsive  1.10\n",
       "5                Lead Origin_Lead Import  1.01"
      ]
     },
     "execution_count": 734,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 735,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping the variable with high VIF which indicates multi collinearity\n",
    "\n",
    "col = col.drop('City')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 736,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6351</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6337</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    13</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2778.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Mon, 20 Apr 2020</td> <th>  Deviance:          </th> <td>  5557.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>22:06:29</td>     <th>  Pearson chi2:      </th> <td>6.70e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>6</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                    <td></td>                      <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                <td>   -0.9347</td> <td>    0.124</td> <td>   -7.528</td> <td> 0.000</td> <td>   -1.178</td> <td>   -0.691</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                         <td>   -1.4107</td> <td>    0.169</td> <td>   -8.339</td> <td> 0.000</td> <td>   -1.742</td> <td>   -1.079</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>          <td>    1.1455</td> <td>    0.040</td> <td>   28.726</td> <td> 0.000</td> <td>    1.067</td> <td>    1.224</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Landing Page Submission</th>  <td>   -0.2049</td> <td>    0.091</td> <td>   -2.241</td> <td> 0.025</td> <td>   -0.384</td> <td>   -0.026</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>            <td>    4.3319</td> <td>    0.226</td> <td>   19.204</td> <td> 0.000</td> <td>    3.890</td> <td>    4.774</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Import</th>              <td>    1.6907</td> <td>    0.448</td> <td>    3.777</td> <td> 0.000</td> <td>    0.813</td> <td>    2.568</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                   <td>    0.3644</td> <td>    0.080</td> <td>    4.539</td> <td> 0.000</td> <td>    0.207</td> <td>    0.522</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>               <td>    1.0229</td> <td>    0.127</td> <td>    8.082</td> <td> 0.000</td> <td>    0.775</td> <td>    1.271</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Specialization_strong demand</th>         <td>   -0.1785</td> <td>    0.083</td> <td>   -2.140</td> <td> 0.032</td> <td>   -0.342</td> <td>   -0.015</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Tags_lost</th>                            <td>    1.0083</td> <td>    0.111</td> <td>    9.066</td> <td> 0.000</td> <td>    0.790</td> <td>    1.226</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Tags_unresponsive</th>                    <td>   -1.1399</td> <td>    0.152</td> <td>   -7.509</td> <td> 0.000</td> <td>   -1.438</td> <td>   -0.842</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_Modified</th>       <td>   -0.8424</td> <td>    0.086</td> <td>   -9.792</td> <td> 0.000</td> <td>   -1.011</td> <td>   -0.674</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_Other activity</th> <td>   -0.3013</td> <td>    0.129</td> <td>   -2.344</td> <td> 0.019</td> <td>   -0.553</td> <td>   -0.049</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Last Notable Activity_SMS Sent</th>       <td>    1.5179</td> <td>    0.088</td> <td>   17.245</td> <td> 0.000</td> <td>    1.345</td> <td>    1.690</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6351\n",
       "Model:                            GLM   Df Residuals:                     6337\n",
       "Model Family:                Binomial   Df Model:                           13\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2778.8\n",
       "Date:                Mon, 20 Apr 2020   Deviance:                       5557.6\n",
       "Time:                        22:06:29   Pearson chi2:                 6.70e+03\n",
       "No. Iterations:                     6                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================\n",
       "                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "--------------------------------------------------------------------------------------------------------\n",
       "const                                   -0.9347      0.124     -7.528      0.000      -1.178      -0.691\n",
       "Do Not Email                            -1.4107      0.169     -8.339      0.000      -1.742      -1.079\n",
       "Total Time Spent on Website              1.1455      0.040     28.726      0.000       1.067       1.224\n",
       "Lead Origin_Landing Page Submission     -0.2049      0.091     -2.241      0.025      -0.384      -0.026\n",
       "Lead Origin_Lead Add Form                4.3319      0.226     19.204      0.000       3.890       4.774\n",
       "Lead Origin_Lead Import                  1.6907      0.448      3.777      0.000       0.813       2.568\n",
       "Lead Source_Google                       0.3644      0.080      4.539      0.000       0.207       0.522\n",
       "Lead Source_Olark Chat                   1.0229      0.127      8.082      0.000       0.775       1.271\n",
       "Specialization_strong demand            -0.1785      0.083     -2.140      0.032      -0.342      -0.015\n",
       "Tags_lost                                1.0083      0.111      9.066      0.000       0.790       1.226\n",
       "Tags_unresponsive                       -1.1399      0.152     -7.509      0.000      -1.438      -0.842\n",
       "Last Notable Activity_Modified          -0.8424      0.086     -9.792      0.000      -1.011      -0.674\n",
       "Last Notable Activity_Other activity    -0.3013      0.129     -2.344      0.019      -0.553      -0.049\n",
       "Last Notable Activity_SMS Sent           1.5179      0.088     17.245      0.000       1.345       1.690\n",
       "========================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 736,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Performing logistic regression in statsmodels\n",
    "# Adding constant to X_train\n",
    "\n",
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "lgr3 = sm.GLM(y_train,X_train_sm,family = sm.families.Binomial())\n",
    "mod = lgr3.fit()\n",
    "mod.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 737,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Specialization_strong demand</td>\n",
       "      <td>3.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Lead Origin_Landing Page Submission</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>Last Notable Activity_Modified</td>\n",
       "      <td>2.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>Last Notable Activity_SMS Sent</td>\n",
       "      <td>1.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>1.68</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>1.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>Last Notable Activity_Other activity</td>\n",
       "      <td>1.30</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Tags_lost</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>Tags_unresponsive</td>\n",
       "      <td>1.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Lead Origin_Lead Import</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                Features   VIF\n",
       "7           Specialization_strong demand  3.18\n",
       "2    Lead Origin_Landing Page Submission  2.10\n",
       "10        Last Notable Activity_Modified  2.03\n",
       "6                 Lead Source_Olark Chat  1.98\n",
       "12        Last Notable Activity_SMS Sent  1.70\n",
       "5                     Lead Source_Google  1.68\n",
       "3              Lead Origin_Lead Add Form  1.39\n",
       "1            Total Time Spent on Website  1.30\n",
       "11  Last Notable Activity_Other activity  1.30\n",
       "8                              Tags_lost  1.20\n",
       "0                           Do Not Email  1.19\n",
       "9                      Tags_unresponsive  1.10\n",
       "4                Lead Origin_Lead Import  1.01"
      ]
     },
     "execution_count": 737,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 590,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predicting y values using the X_train set\n",
    "\n",
    "y_train_pred = mod.predict(X_train_sm).values.reshape(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 591,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.18217673, 0.02536374, 0.12448288, 0.88916086, 0.76114699])"
      ]
     },
     "execution_count": 591,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 738,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Conversion_Prob</th>\n",
       "      <th>Lead_ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.182177</td>\n",
       "      <td>3009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.025364</td>\n",
       "      <td>1012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124483</td>\n",
       "      <td>9226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.889161</td>\n",
       "      <td>4750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.761147</td>\n",
       "      <td>7987</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Conversion_Prob  Lead_ID\n",
       "0          0         0.182177     3009\n",
       "1          0         0.025364     1012\n",
       "2          0         0.124483     9226\n",
       "3          1         0.889161     4750\n",
       "4          1         0.761147     7987"
      ]
     },
     "execution_count": 738,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Converting the probability array into data frame and also importing index\n",
    "\n",
    "y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Conversion_Prob':y_train_pred})\n",
    "y_train_pred_final['Lead_ID'] = y_train.index\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 739,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Conversion_Prob</th>\n",
       "      <th>Lead_ID</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.182177</td>\n",
       "      <td>3009</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.025364</td>\n",
       "      <td>1012</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124483</td>\n",
       "      <td>9226</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.889161</td>\n",
       "      <td>4750</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.761147</td>\n",
       "      <td>7987</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Conversion_Prob  Lead_ID  predicted\n",
       "0          0         0.182177     3009          0\n",
       "1          0         0.025364     1012          0\n",
       "2          0         0.124483     9226          0\n",
       "3          1         0.889161     4750          1\n",
       "4          1         0.761147     7987          1"
      ]
     },
     "execution_count": 739,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# taking cutoff for conversion probability at 0.5 and creating separate column for predicted conversion\n",
    "\n",
    "def prob(x):\n",
    "    if x >= 0.5:\n",
    "        return 1\n",
    "    else:\n",
    "        return 0\n",
    "y_train_pred_final['predicted'] = y_train_pred_final['Conversion_Prob'].apply(prob)\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 740,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3415  490]\n",
      " [ 770 1676]]\n"
     ]
    }
   ],
   "source": [
    "# Obtaining confusion matric to evaluate the model\n",
    "\n",
    "confusion = metrics.confusion_matrix(y_train_pred_final['Converted'], y_train_pred_final['predicted'] )\n",
    "print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 382,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicted     not_converted    converted\n",
    "# Actual\n",
    "# not_converted        3415      490\n",
    "# converted             770     1676  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 741,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8016060462919226\n"
     ]
    }
   ],
   "source": [
    "# Calculating accuracy of the model\n",
    "print(metrics.accuracy_score(y_train_pred_final['Converted'], y_train_pred_final['predicted']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 742,
   "metadata": {},
   "outputs": [],
   "source": [
    "TP = confusion[1,1] # true positive \n",
    "TN = confusion[0,0] # true negatives\n",
    "FP = confusion[0,1] # false positives\n",
    "FN = confusion[1,0] # false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 743,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6852003270645952"
      ]
     },
     "execution_count": 743,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sensitivity of our logistic regression model\n",
    "TP / float(TP+FN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 744,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8745198463508322"
      ]
     },
     "execution_count": 744,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 745,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.12548015364916773\n"
     ]
    }
   ],
   "source": [
    "# Calculate false postive rate - predicting churn when customer does not have churned\n",
    "print(FP/ float(TN+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 746,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7737765466297323\n"
     ]
    }
   ],
   "source": [
    "# positive predictive value \n",
    "print (TP / float(TP+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 747,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8160095579450418\n"
     ]
    }
   ],
   "source": [
    "# Negative predictive value\n",
    "print (TN / float(TN+ FN))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### ROC curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 748,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_roc( actual, probs ):\n",
    "    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n",
    "                                              drop_intermediate = False )\n",
    "    auc_score = metrics.roc_auc_score( actual, probs )\n",
    "    plt.figure(figsize=(5, 5))\n",
    "    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n",
    "    plt.plot([0, 1], [0, 1], 'k--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver operating characteristic example')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.show()\n",
    "\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 749,
   "metadata": {},
   "outputs": [],
   "source": [
    "fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final['Converted'], y_train_pred_final['Conversion_Prob'],\n",
    "                                              drop_intermediate = False )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 750,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "draw_roc( y_train_pred_final['Converted'], y_train_pred_final['Conversion_Prob'] )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 751,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Conversion_Prob</th>\n",
       "      <th>Lead_ID</th>\n",
       "      <th>predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>0.1</th>\n",
       "      <th>0.2</th>\n",
       "      <th>0.3</th>\n",
       "      <th>0.4</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.6</th>\n",
       "      <th>0.7</th>\n",
       "      <th>0.8</th>\n",
       "      <th>0.9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.182177</td>\n",
       "      <td>3009</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.025364</td>\n",
       "      <td>1012</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124483</td>\n",
       "      <td>9226</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.889161</td>\n",
       "      <td>4750</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.761147</td>\n",
       "      <td>7987</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Conversion_Prob  Lead_ID  predicted  0.0  0.1  0.2  0.3  0.4  \\\n",
       "0          0         0.182177     3009          0    1    1    0    0    0   \n",
       "1          0         0.025364     1012          0    1    0    0    0    0   \n",
       "2          0         0.124483     9226          0    1    1    0    0    0   \n",
       "3          1         0.889161     4750          1    1    1    1    1    1   \n",
       "4          1         0.761147     7987          1    1    1    1    1    1   \n",
       "\n",
       "   0.5  0.6  0.7  0.8  0.9  \n",
       "0    0    0    0    0    0  \n",
       "1    0    0    0    0    0  \n",
       "2    0    0    0    0    0  \n",
       "3    1    1    1    1    0  \n",
       "4    1    1    1    0    0  "
      ]
     },
     "execution_count": 751,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating columns with different probability cutoffs \n",
    "numbers = [float(x)/10 for x in range(10)]\n",
    "for i in numbers:\n",
    "    y_train_pred_final[i]= y_train_pred_final['Conversion_Prob'].map(lambda x: 1 if x>i else 0)\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 752,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     prob  accuracy     sensi     speci\n",
      "0.0   0.0  0.385136  1.000000  0.000000\n",
      "0.1   0.1  0.550307  0.973835  0.285019\n",
      "0.2   0.2  0.742245  0.912919  0.635339\n",
      "0.3   0.3  0.797040  0.834015  0.773880\n",
      "0.4   0.4  0.806645  0.773917  0.827145\n",
      "0.5   0.5  0.801606  0.685200  0.874520\n",
      "0.6   0.6  0.790584  0.601799  0.908835\n",
      "0.7   0.7  0.762085  0.473426  0.942894\n",
      "0.8   0.8  0.741143  0.383483  0.965173\n",
      "0.9   0.9  0.703354  0.255519  0.983867\n"
     ]
    }
   ],
   "source": [
    "# calculating accuracy sensitivity and specificity for various probability cutoffs.\n",
    "cutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# TP = confusion[1,1] # true positive \n",
    "# TN = confusion[0,0] # true negatives\n",
    "# FP = confusion[0,1] # false positives\n",
    "# FN = confusion[1,0] # false negatives\n",
    "\n",
    "num = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\n",
    "for i in num:\n",
    "    cm1 = metrics.confusion_matrix(y_train_pred_final['Converted'], y_train_pred_final[i] )\n",
    "    total1=sum(sum(cm1))\n",
    "    accuracy = (cm1[0,0]+cm1[1,1])/total1\n",
    "    \n",
    "    speci = cm1[0,0]/(cm1[0,0]+cm1[0,1])\n",
    "    sensi = cm1[1,1]/(cm1[1,0]+cm1[1,1])\n",
    "    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\n",
    "print(cutoff_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 753,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#  plotting accuracy sensitivity and specificity for various probabilities.\n",
    "cutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Optimal cutoff is at around 0.35"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 754,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculating recall and precision\n",
    "\n",
    "from sklearn.metrics import precision_score, recall_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 755,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7737765466297323"
      ]
     },
     "execution_count": 755,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "precision_score(y_train_pred_final['Converted'], y_train_pred_final['predicted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 756,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6852003270645952"
      ]
     },
     "execution_count": 756,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "recall_score(y_train_pred_final['Converted'], y_train_pred_final['predicted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 757,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 758,
   "metadata": {},
   "outputs": [],
   "source": [
    "p, r, thresholds = precision_recall_curve(y_train_pred_final['Converted'], y_train_pred_final['Conversion_Prob'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 759,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(thresholds, p[:-1], \"g-\")\n",
    "plt.plot(thresholds, r[:-1], \"r-\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 760,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Conversion_Prob</th>\n",
       "      <th>Lead_ID</th>\n",
       "      <th>predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>0.1</th>\n",
       "      <th>0.2</th>\n",
       "      <th>0.3</th>\n",
       "      <th>0.4</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.6</th>\n",
       "      <th>0.7</th>\n",
       "      <th>0.8</th>\n",
       "      <th>0.9</th>\n",
       "      <th>final_predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.182177</td>\n",
       "      <td>3009</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.025364</td>\n",
       "      <td>1012</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124483</td>\n",
       "      <td>9226</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.889161</td>\n",
       "      <td>4750</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0.761147</td>\n",
       "      <td>7987</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Conversion_Prob  Lead_ID  predicted  0.0  0.1  0.2  0.3  0.4  \\\n",
       "0          0         0.182177     3009          0    1    1    0    0    0   \n",
       "1          0         0.025364     1012          0    1    0    0    0    0   \n",
       "2          0         0.124483     9226          0    1    1    0    0    0   \n",
       "3          1         0.889161     4750          1    1    1    1    1    1   \n",
       "4          1         0.761147     7987          1    1    1    1    1    1   \n",
       "\n",
       "   0.5  0.6  0.7  0.8  0.9  final_predicted  \n",
       "0    0    0    0    0    0                0  \n",
       "1    0    0    0    0    0                0  \n",
       "2    0    0    0    0    0                0  \n",
       "3    1    1    1    1    0                1  \n",
       "4    1    1    1    0    0                1  "
      ]
     },
     "execution_count": 760,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# creating a column with final prediction based on optimal cutoff\n",
    "\n",
    "y_train_pred_final['final_predicted'] = y_train_pred_final['Conversion_Prob'].map( lambda x: 1 if x > 0.35 else 0)\n",
    "\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 761,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3129  776]\n",
      " [ 458 1988]]\n"
     ]
    }
   ],
   "source": [
    "# Creating confusion matric based on optimal cutoff\n",
    "\n",
    "confusion = metrics.confusion_matrix(y_train_pred_final['Converted'], y_train_pred_final['final_predicted'] )\n",
    "print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 762,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8056998897811368"
      ]
     },
     "execution_count": 762,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  overall accuracy.\n",
    "metrics.accuracy_score(y_train_pred_final['Converted'], y_train_pred_final['final_predicted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 763,
   "metadata": {},
   "outputs": [],
   "source": [
    "TP = confusion[1,1] # true positive \n",
    "TN = confusion[0,0] # true negatives\n",
    "FP = confusion[0,1] # false positives\n",
    "FN = confusion[1,0] # false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 764,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.812755519215045"
      ]
     },
     "execution_count": 764,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  sensitivity of our logistic regression model\n",
    "TP / float(TP+FN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 765,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8012804097311139"
      ]
     },
     "execution_count": 765,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 766,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.19871959026888605\n"
     ]
    }
   ],
   "source": [
    "# Calculate false postive rate - predicting churn when customer does not have churned\n",
    "print(FP/ float(TN+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 767,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7192474674384949\n"
     ]
    }
   ],
   "source": [
    "# positive predictive value \n",
    "print (TP / float(TP+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 768,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.872316699191525\n"
     ]
    }
   ],
   "source": [
    "# Negative predictive value\n",
    "print (TN / float(TN+ FN))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 769,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:3: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  This is separate from the ipykernel package so we can avoid doing imports until\n",
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/pandas/core/indexing.py:494: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  self.obj[item] = s\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Country</th>\n",
       "      <th>City</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>...</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Others</th>\n",
       "      <th>Specialization_strong demand</th>\n",
       "      <th>Specialization_weak demand</th>\n",
       "      <th>Tags_lost</th>\n",
       "      <th>Tags_unresponsive</th>\n",
       "      <th>Last Notable Activity_Modified</th>\n",
       "      <th>Last Notable Activity_Other activity</th>\n",
       "      <th>Last Notable Activity_SMS Sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3271</td>\n",
       "      <td>0</td>\n",
       "      <td>0.102194</td>\n",
       "      <td>-0.600595</td>\n",
       "      <td>0.773206</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1490</td>\n",
       "      <td>0</td>\n",
       "      <td>0.295588</td>\n",
       "      <td>1.887326</td>\n",
       "      <td>1.249642</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7936</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.284595</td>\n",
       "      <td>-0.752879</td>\n",
       "      <td>-0.179666</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4216</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.671384</td>\n",
       "      <td>-0.888650</td>\n",
       "      <td>-1.132538</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3830</td>\n",
       "      <td>0</td>\n",
       "      <td>0.875771</td>\n",
       "      <td>-0.587751</td>\n",
       "      <td>2.678951</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Do Not Email  TotalVisits  Total Time Spent on Website  \\\n",
       "3271             0     0.102194                    -0.600595   \n",
       "1490             0     0.295588                     1.887326   \n",
       "7936             0    -0.284595                    -0.752879   \n",
       "4216             0    -0.671384                    -0.888650   \n",
       "3830             0     0.875771                    -0.587751   \n",
       "\n",
       "      Page Views Per Visit  Country  City  \\\n",
       "3271              0.773206        1     1   \n",
       "1490              1.249642        1     1   \n",
       "7936             -0.179666        1     1   \n",
       "4216             -1.132538        1     1   \n",
       "3830              2.678951        1     0   \n",
       "\n",
       "      A free copy of Mastering The Interview  \\\n",
       "3271                                       0   \n",
       "1490                                       1   \n",
       "7936                                       0   \n",
       "4216                                       0   \n",
       "3830                                       1   \n",
       "\n",
       "      Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "3271                                    0                          0   \n",
       "1490                                    1                          0   \n",
       "7936                                    0                          0   \n",
       "4216                                    0                          1   \n",
       "3830                                    1                          0   \n",
       "\n",
       "      Lead Origin_Lead Import  ...  Lead Source_Olark Chat  \\\n",
       "3271                        0  ...                       0   \n",
       "1490                        0  ...                       0   \n",
       "7936                        0  ...                       0   \n",
       "4216                        0  ...                       0   \n",
       "3830                        0  ...                       0   \n",
       "\n",
       "      Lead Source_Organic Search  Lead Source_Others  \\\n",
       "3271                           0                   0   \n",
       "1490                           0                   0   \n",
       "7936                           0                   0   \n",
       "4216                           0                   1   \n",
       "3830                           1                   0   \n",
       "\n",
       "      Specialization_strong demand  Specialization_weak demand  Tags_lost  \\\n",
       "3271                             1                           0          0   \n",
       "1490                             0                           0          0   \n",
       "7936                             1                           0          0   \n",
       "4216                             0                           1          1   \n",
       "3830                             0                           1          0   \n",
       "\n",
       "      Tags_unresponsive  Last Notable Activity_Modified  \\\n",
       "3271                  0                               0   \n",
       "1490                  0                               0   \n",
       "7936                  0                               0   \n",
       "4216                  0                               1   \n",
       "3830                  0                               0   \n",
       "\n",
       "      Last Notable Activity_Other activity  Last Notable Activity_SMS Sent  \n",
       "3271                                     0                               0  \n",
       "1490                                     0                               0  \n",
       "7936                                     0                               0  \n",
       "4216                                     0                               0  \n",
       "3830                                     0                               0  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 769,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Scaling the. test set\n",
    "\n",
    "X_test[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.transform(X_test[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']])\n",
    "X_test.head()                 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 770,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/khemendrasai/opt/anaconda3/lib/python3.7/site-packages/numpy/core/fromnumeric.py:2495: FutureWarning: Method .ptp is deprecated and will be removed in a future version. Use numpy.ptp instead.\n",
      "  return ptp(axis=axis, out=out, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>const</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>Lead Source_Google</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Specialization_strong demand</th>\n",
       "      <th>Tags_lost</th>\n",
       "      <th>Tags_unresponsive</th>\n",
       "      <th>Last Notable Activity_Modified</th>\n",
       "      <th>Last Notable Activity_Other activity</th>\n",
       "      <th>Last Notable Activity_SMS Sent</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>3271</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.600595</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1490</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.887326</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7936</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.752879</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4216</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.888650</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3830</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.587751</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      const  Do Not Email  Total Time Spent on Website  \\\n",
       "3271    1.0             0                    -0.600595   \n",
       "1490    1.0             0                     1.887326   \n",
       "7936    1.0             0                    -0.752879   \n",
       "4216    1.0             0                    -0.888650   \n",
       "3830    1.0             0                    -0.587751   \n",
       "\n",
       "      Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "3271                                    0                          0   \n",
       "1490                                    1                          0   \n",
       "7936                                    0                          0   \n",
       "4216                                    0                          1   \n",
       "3830                                    1                          0   \n",
       "\n",
       "      Lead Origin_Lead Import  Lead Source_Google  Lead Source_Olark Chat  \\\n",
       "3271                        0                   1                       0   \n",
       "1490                        0                   0                       0   \n",
       "7936                        0                   1                       0   \n",
       "4216                        0                   0                       0   \n",
       "3830                        0                   0                       0   \n",
       "\n",
       "      Specialization_strong demand  Tags_lost  Tags_unresponsive  \\\n",
       "3271                             1          0                  0   \n",
       "1490                             0          0                  0   \n",
       "7936                             1          0                  0   \n",
       "4216                             0          1                  0   \n",
       "3830                             0          0                  0   \n",
       "\n",
       "      Last Notable Activity_Modified  Last Notable Activity_Other activity  \\\n",
       "3271                               0                                     0   \n",
       "1490                               0                                     0   \n",
       "7936                               0                                     0   \n",
       "4216                               1                                     0   \n",
       "3830                               0                                     0   \n",
       "\n",
       "      Last Notable Activity_SMS Sent  \n",
       "3271                               0  \n",
       "1490                               0  \n",
       "7936                               0  \n",
       "4216                               0  \n",
       "3830                               0  "
      ]
     },
     "execution_count": 770,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding constant to test set\n",
    "\n",
    "X_test_sm = sm.add_constant(X_test[col])\n",
    "X_test_sm.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 771,
   "metadata": {},
   "outputs": [],
   "source": [
    "# predicting conversion probability for test set\n",
    "\n",
    "y_test_pred = mod.predict(X_test_sm).values.reshape(-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 772,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Conversion_Prob</th>\n",
       "      <th>Lead_ID</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.192046</td>\n",
       "      <td>3271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.735421</td>\n",
       "      <td>1490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166421</td>\n",
       "      <td>7936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.927250</td>\n",
       "      <td>4216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0.140286</td>\n",
       "      <td>3830</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Conversion_Prob  Lead_ID\n",
       "0          0         0.192046     3271\n",
       "1          1         0.735421     1490\n",
       "2          0         0.166421     7936\n",
       "3          1         0.927250     4216\n",
       "4          0         0.140286     3830"
      ]
     },
     "execution_count": 772,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#converting y_test_pred to a data frame and importing index\n",
    "\n",
    "y_test_pred_final = pd.DataFrame({'Converted':y_test.values, 'Conversion_Prob':y_test_pred})\n",
    "y_test_pred_final['Lead_ID'] = y_test.index\n",
    "y_test_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 773,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Conversion_Prob</th>\n",
       "      <th>Lead_ID</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.192046</td>\n",
       "      <td>3271</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.735421</td>\n",
       "      <td>1490</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0.166421</td>\n",
       "      <td>7936</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0.927250</td>\n",
       "      <td>4216</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0.140286</td>\n",
       "      <td>3830</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Conversion_Prob  Lead_ID  predicted\n",
       "0          0         0.192046     3271          0\n",
       "1          1         0.735421     1490          1\n",
       "2          0         0.166421     7936          0\n",
       "3          1         0.927250     4216          1\n",
       "4          0         0.140286     3830          0"
      ]
     },
     "execution_count": 773,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Based on the cutoff at 0.30, obtaining the converion in binary\n",
    "\n",
    "y_test_pred_final['predicted'] = y_test_pred_final['Conversion_Prob'].map(lambda x: 1 if x>0.30 else 0 )\n",
    "y_test_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 774,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7873668747704737"
      ]
     },
     "execution_count": 774,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#  overall accuracy.\n",
    "metrics.accuracy_score(y_test_pred_final['Converted'], y_test_pred_final['predicted'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 776,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1349,  385],\n",
       "       [ 194,  795]])"
      ]
     },
     "execution_count": 776,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Creating confusion matric\n",
    "\n",
    "confusion2 = metrics.confusion_matrix(y_test_pred_final['Converted'], y_test_pred_final['predicted'] )\n",
    "confusion2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 777,
   "metadata": {},
   "outputs": [],
   "source": [
    "TP = confusion2[1,1] # true positive \n",
    "TN = confusion2[0,0] # true negatives\n",
    "FP = confusion2[0,1] # false positives\n",
    "FN = confusion2[1,0] # false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 778,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8038422649140546"
      ]
     },
     "execution_count": 778,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# sensitivity of our logistic regression model\n",
    "TP / float(TP+FN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 779,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7779700115340253"
      ]
     },
     "execution_count": 779,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
